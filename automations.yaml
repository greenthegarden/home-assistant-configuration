---
# Automation

# https://www.home-assistant.io/docs/automation/

# (trigger)    When Paulus arrives home
# (condition)  and it is after sunset:
# (action)     Turn the lights in the living room on

- alias: Cold weather Automations
  trigger:
    - platform: template
      value_template: "{{ is_state('sensor.season', 'autumn') }}"
    - platform: template
      value_template: "{{ is_state('sensor.season', 'winter') }}"
  action:
    - service: homeassistant.turn_on
      entity_id: automation.temperature_outside_higher_than_inside
    - service: homeassistant.turn_off
      entity_id: automation.temperature_outside_higher_than_inside

# - alias: Set temp slider
#   trigger:
#     platform: mqtt
#     topic: setTemperature
#   action:
#     service: input_number.set_value
#     data_template:
#       entity_id: input_number.target_temp
#       value: '{{ trigger.payload }}'
#   id: 55b109fc2e5f4fa1b8dd95e5016049eb

# - alias: Temp slider moved
#   trigger:
#     platform: state
#     entity_id: input_number.target_temp
#   action:
#     service: mqtt.publish
#     data_template:
#       topic: setTemperature
#       retain: true
#       payload: '{{ states(''input_number.target_temp'') | int }}'
#   id: e7deb276ac56457cae4eed6034186988

# - alias: Bedroom Light - Custom
#   trigger:
#     platform: state
#     entity_id: input_select.scene_bedroom
#     to: CUSTOM
#   action:
#   - service: light.turn_on
#     data_template:
#       entity_id: light.bedroom
#       brightness: '{{ states(''input_number.bedroom_brightness'') | int }}'
#   id: d764a33f8eb14ad38cae9fcb2bf0b986

# - alias: 'Heat ON Mon Tue'
#   trigger:
#   - platform: time
#     at: '06:00:00'
#   - platform: time
#     at: '18:00:00'
#   condition:
#     condition: time
#     weekday:
#     - mon
#     - tue
#   action:
#     service: climate.turn_on
#     entity_id: climate.your_thermostat

# - alias: 'Heat OFF Mon Tue'
#   trigger:
#   - platform: time
#     at: '07:30:00'
#   - platform: time
#     at: '21:30:00'
#   condition:
#     condition: time
#     weekday:
#     - mon
#     - tue
#   action:
#     service: climate.turn_off
#     entity_id: climate.your_thermostat

# - alias: Temperature too high
#   trigger:
#     platform: numeric_state
#     entity_id: sensor.bom_adelaide_weather_air_temp_c
#     above: 25
#   action:
#     service: notify.telegram
#     data:
#       message: Too hot!!
#   id: bom_adelaide_weather_temperature_too_high

# - alias: Temperature outside higher than inside
#   trigger:
#     - platform: template
#       value_template: >
#         {{ states('sensor.bom_adelaide_weather_air_temp_c') > states('enviro_3_bme280_temperature') }}
#   # condition:
#   #   condition: or
#   #   conditions:
#   #     - condition: state
#   #       entity_id: sensor.season
#   #       state: 'autumn'
#   #     - condition: state
#   #       entity_id: sensor.season
#   #       state: 'winter'
#   action:
#     service: notify.telegram
#     data_template:
#       message: "Outside temperature {{ states('sensor.bom_adelaide_weather_air_temp_c') }} higher than inside"
#   id: temp_outside_higher_than_inside

# - alias: Temperature outside lower than inside
#   trigger:
#     - platform: template
#       value_template: >
#         {{ states('sensor.bom_adelaide_weather_air_temp_c') < states('enviro_3_bme280_temperature') }}
#   # condition:
#   #   condition: or
#   #   conditions:
#   #     - condition: state
#   #       entity_id: sensor.season
#   #       state: 'autumn'
#   #     - condition: state
#   #       entity_id: sensor.season
#   #       state: 'winter'
#   action:
#     service: notify.telegram
#     data_template:
#       message: "Outside temperature {{ states('sensor.bom_adelaide_weather_air_temp_c') }} lower than inside"
#   id: temp_outside_lower_than_inside

# - alias: New Home Assistant version available
#   trigger:
#     platform: state
#     entity_id: binary_sensor.updater
#     from: 'off'
#     to: 'on'
#   action:
#     service: notify.telegram
#     data_template:
#       message: "Version {{ state_attr('binary_sensor.updater', 'newest_version') }} of Home Assistant is now available"
#   id: home_assistant_new_version

# - alias: Host memory utilisation too high
#   trigger:
#     platform: template
#     value_template: "{{ states('sensor.memory_use_percent') > states('input_number.host_resource_utilisation_trigger') }}"
#     for:
#       seconds: "{{ states('input_number.host_resource_utilisation_delay_seconds') | int }}"
#     # platform: numeric_state
#     # entity_id: sensor.memory_use_percent
#     # above: 50
#     # for:
#     #   seconds: "{{ states('input_number.host_resource_utilisation_delay_seconds') | int }}"
#   action:
#     service: notify.telegram
#     data_template:
#       message: "Host memory utilisation too high at {{ states('sensor.memory_use_percent') }}%"
#   id: host_memory_utilisation_too_high

# - alias: Host processor utilisation too high
#   trigger:
#     platform: template
#     value_template: "{{ states('sensor.processor_use') > states('input_number.host_resource_utilisation_trigger') }}"
#     for:
#       seconds: "{{ states('input_number.host_resource_utilisation_delay_seconds') | int }}"
#   # trigger:
#   #   platform: numeric_state
#   #   entity_id: sensor.processor_use
#   #   above: 50
#   action:
#     service: notify.telegram
#     data_template:
#       message: "Host processor utilisation too high at {{ states('sensor.processor_use') }}%"
#   id: host_processor_utilisation_too_high

# - alias: Host disk usage too high
#   trigger:
#     platform: numeric_state
#     entity_id: sensor.disk_use_percent
#     above: 50
#   action:
#     service: notify.telegram
#     data_template:
#       message: "Host disk usage too high at {{ states('sensor.disk_use_percent') }}%"
#   id: host_disk_usage_too_high

# - alias: Notify when external IP changes
#   initial_state: on
#   trigger:
#     platform: state
#     entity_id: sensor.dnsip
#   action:
#     service: notify.telegram
#     data_template:
#       message: "New external IP address is {{ states('sensor.dnsip') }}"
#   id: new_external_ip

- alias: Phone battery low
  trigger:
    platform: numeric_state
    entity_id: sensor.f1f_battery_level
    below: 25
  action:
    service: notify.telegram
    data_template:
      message: "Phone battery level at {{ sensor.f1f_battery_level }}%. Put on charge."
  id: phone_battery_low

- alias: Flight entry notification
  trigger:
    platform: event
    event_type: opensky_entry
  action:
    service: notify.telegram
    data_template:
      message: "Flight entry of {{ trigger.event.data.callsign }}"
  id: flight_entry_notification
# - id: bedroom_power_switch_on
#   alias: Bedroom power switch on
#   initial_state: 'on'
#   trigger:
#   - platform: time
#     at: '22:00:00'
#   action:
#   - service: mqtt.publish
#     data:
#       topic: relayshield/control/relay
#       payload: 1,1
# - id: bedroom_power_switch_off
#   alias: Bedroom power switch off
#   initial_state: 'on'
#   trigger:
#   - platform: time
#     at: '23:00:00'
#   action:
#   - service: mqtt.publish
#     data:
#       topic: relayshield/control/relay
#       payload: 1,0

# - alias: Update OpenUV every 30 minutes during the daytime
#   trigger:
#     platform: time_pattern
#     minutes: /30
#   condition:
#     condition: and
#     conditions:
#     - condition: sun
#       after: sunrise
#     - condition: sun
#       before: sunset
#   action:
#     service: openuv.update_data
#   id: 5d03a6cd6a4d406ea84798dd32334da2

# - alias: Update OpenUV every 20 minutes while the sun is at least 10 degrees above
#     the horizon
#   trigger:
#     platform: time_pattern
#     minutes: /20
#   condition:
#     condition: numeric_state
#     entity_id: sun.sun
#     value_template: '{{ state.attributes.elevation }}'
#     above: 10
#   action:
#     service: openuv.update_uv_index_data
#   id: 7b05d55a83d64a4ba2f83ac214191931

# - alias: Update OpenUV protection window once a day
#   trigger:
#     platform: time
#     at: 02:12:00
#   action:
#     service: openuv.update_protection_data
#   id: 28147d54978246eca2b71d730b82a732

# - alias: at_home
#   description: People at home
#   trigger:
#   - entity_id: binary_sensor.people_home
#     platform: state
#   action:
#     - service: notify.telegram
#       data_template:
#         message: >
#           {% if is_state('binary_sensor.people_home', 'on') %}
#             'Both home'
#           {% else %}
#             'No one home'
#           {% endif %}
#   id: at_home

# - alias: Turn porch light on when returning home
#   description: 'Turn porch light on when returning home'
#   trigger:
#   - platform: state
#     entity_id: device_tracker.android_d327a911d05359f1_home_gateway
#     from: not_home
#     to: home
#   condition:
#     condition: sun
#     after: sunset
#     after_offset: '+01:00:00'
#     before: sunrise
#     before_offset: '-01:00:00'
#   action:
#   - device_id: e629a6160ee94770867e56b37b322a19
#     domain: light
#     entity_id: light.light
#     type: turn_on
#   id: '1588325165211'

# - alias: Data time example
#   trigger:
#     platform: state
#     entity_id: input_boolean.example
#     to: 'on'
#   action:
#   # Sets time to '05:30:00
#   - service: input_datetime.set_datetime
#     entity_id: input_datetime.bedroom_alarm_clock_time
#     data:
#       time: '05:30:00'
#    # Sets time to time from datetime object (current time in this example)
#   - service: input_datetime.set_datetime
#     entity_id: input_datetime.another_time
#     data_template:
#       time: "{{ now().strftime('%H:%M:%S') }}"
#   # Sets date to date from timestamp (current date in this example)
#   - service: input_datetime.set_datetime
#     entity_id: input_datetime.another_date
#     data_template:
#       date: "{{ as_timestamp(now())|timestamp_custom('%Y-%m-%d') }}"
#   # Sets date and time to date and time from datetime object (current date and time in this example)
#   - service: input_datetime.set_datetime
#     entity_id: input_datetime.date_and_time
#     data_template:
#       datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
#   # Sets date and time to date and time from timestamp (current date and time in this example)
#   - service: input_datetime.set_datetime
#     data_template:
#       entity_id: input_datetime.date_and_time
#       date: >
#         {{ now().timestamp() | timestamp_custom("%Y-%m-%d", true) }}
#       time: >
#         {{ now().timestamp() | timestamp_custom("%H:%M:%S", true) }}
#   id: test_automation

# - alias: Irrigation zone on
#   trigger:
#     platform: state
#     entity_id: input_boolean.irrigation_run_manual
#     from: 'off'
#     to: 'on'
#   action:
#     service: mqtt.publish
#     data:
#       topic: relduino/control/relay
#       payload: 1,1
#   id: irrigation_zone_on

# - alias: Irrigation zone off
#   trigger:
#     platform: state
#     entity_id: input_boolean.irrigation_run_manual
#     from: 'on'
#     to: 'off'
#   action:
#     service: mqtt.publish
#     data:
#       topic: relduino/control/relay
#       payload: 1,1
#   id: irrigation_zone_off

# - alias: Switch Irrigation Zone to Off
#   trigger:
#     platform: state
#     entity_id: input_boolean.irrigation_mode_select
#     from: 'on'
#     to: 'off'
#   action:
#     - service: input_select.select_option
#       data:
#         entity_id: input_select.irrigation_zone
#         option: "OFF"
#     - service: input_boolean.turn_off
#       entity_id: input_boolean.irrigation_run_manual

# - alias: Irrigation day counter lawn
#   trigger:
#     platform: template
#     value_template: >
#       {{ ( states('sensor.time') == (state_attr('input_datetime.irrigation_time_lawn', 'timestamp') | int) | timestamp_custom('%H:%M', False)) }}
#   action:
#     service: counter.increment
#     entity_id: counter.irrigation_days_counter_lawn
#   id: irrigation_day_counter_lawn

# - alias: Irrigation day counter shrubs
#   trigger:
#     platform: template
#     value_template: >
#       {{ ( states('sensor.time') == (state_attr('input_datetime.irrigation_time_shrubs', 'timestamp') | int) | timestamp_custom('%H:%M', False)) }}
#   action:
#     service: counter.increment
#     entity_id: counter.irrigation_days_counter_shrubs
#   id: irrigation_day_counter_shrubs

# - alias: Irrigation day counter trees
#   trigger:
#     platform: template
#     value_template: >
#       {{ ( states('sensor.time') == (state_attr('input_datetime.irrigation_time_trees', 'timestamp') | int) | timestamp_custom('%H:%M', False)) }}
#   action:
#     service: counter.increment
#     entity_id: counter.irrigation_days_counter_trees
#   id: irrigation_day_counter_trees

# - alias: Irrigation day counter vegetables
#   trigger:
#     platform: template
#     value_template: >
#       {{ ( states('sensor.time') == (state_attr('input_datetime.irrigation_time_vegetables', 'timestamp') | int) | timestamp_custom('%H:%M', False)) }}
#   action:
#     service: counter.increment
#     entity_id: counter.irrigation_days_counter_vegetables
#   id: irrigation_day_counter_vegetables

# - alias: Irrigation on lawn
#   trigger:
#     platform: template
#     value_template: >
#       {{ states('counter.irrigation_days_counter_lawn') >= states('input_number.irrigation_interval_lawn') }}
#   condition:
#     condition: state
#     entity_id: input_boolean.irrigation_mode_select
#     state: 'on'
#   action:
#     - service: counter.reset
#       entity_id: counter.irrigation_days_counter_lawn
#     - service: input_boolean.turn_on
#       entity_id: input_boolean.irrigation_state_lawn
#     - service: notify.telegram
#       data:
#         message: Irrigation on lawn
#   # - service: mqtt.publish
#   #   data:
#   #     topic: relayduino/control/relay
#   #     payload: 1,1
#   id: irrigation_on_lawn

# - alias: Irrigation on shrubs
#   trigger:
#     platform: template
#     value_template: >
#       {{ states('counter.irrigation_days_counter_shrubs') >= states('input_number.irrigation_interval_shrubs') }}
#   condition:
#     condition: state
#     entity_id: input_boolean.irrigation_mode_select
#     state: 'on'
#   action:
#     - service: counter.reset
#       entity_id: counter.irrigation_days_counter_shrubs
#     - service: input_boolean.turn_on
#       entity_id: input_boolean.irrigation_state_shrubs
#     - service: notify.telegram
#       data:
#         message: Irrigation on shrubs
#   # - service: mqtt.publish
#   #   data:
#   #     topic: relayduino/control/relay
#   #     payload: 1,1
#   id: irrigation_on_shrubs

# - alias: Irrigation on trees
#   trigger:
#     platform: template
#     value_template: >
#       {{ states('counter.irrigation_days_counter_trees') >= states('input_number.irrigation_interval_trees') }}
#   condition:
#     condition: state
#     entity_id: input_boolean.irrigation_mode_select
#     state: 'on'
#   action:
#     - service: counter.reset
#       entity_id: counter.irrigation_days_counter_trees
#     - service: input_boolean.turn_on
#       entity_id: input_boolean.irrigation_state_trees
#     - service: notify.telegram
#       data:
#         message: Irrigation on trees
#   # - service: mqtt.publish
#   #   data:
#   #     topic: relayduino/control/relay
#   #     payload: 1,1
#   id: irrigation_on_trees

# - alias: Irrigation on vegetables
#   trigger:
#     platform: template
#     value_template: >
#       {{ states('counter.irrigation_days_counter_vegetables') >= states('input_number.irrigation_interval_vegetables') }}
#   condition:
#     condition: state
#     entity_id: input_boolean.irrigation_mode_select
#     state: 'on'
#   action:
#     - service: counter.reset
#       entity_id: counter.irrigation_days_counter_vegetables
#     - service: input_boolean.turn_on
#       entity_id: input_boolean.irrigation_state_vegetables
#     - service: notify.telegram
#       data:
#         message: Irrigation on vegetables
#   # - service: mqtt.publish
#   #   data:
#   #     topic: relayduino/control/relay
#   #     payload: 1,1
#   id: irrigation_on_vegetables
